// Prisma Schema para NeuroPlan AI Campus - MVP PRODUCCIÓN
// Arquitectura multi-tenant con roles, centros educativos y seguridad
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================================
// GESTIÓN DE USUARIOS Y MULTI-TENANCY
// ==============================================

// Centro educativo (multi-tenancy)
model Centro {
  id        String   @id @default(cuid())
  nombre    String
  codigo    String   @unique // CIF o código único del centro
  ciudad    String
  provincia String
  tipo      String   // PRIMARIA, ESO, BACHILLERATO, FP, UNIVERSIDAD
  
  // Configuración
  maxUsuarios Int      @default(100)
  activo      Boolean  @default(true)
  
  // Metadatos
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  usuarios  Usuario[]
  estudiantes Student[]
  temarios  Temario[]
  
  @@map("centros")
}

// Usuario del sistema (profesores, orientadores, administradores)
model Usuario {
  id       String @id @default(cuid())
  email    String @unique
  password String // Hasheado con bcrypt
  nombre   String
  apellidos String
  
  // Rol y permisos
  rol      String // ADMIN, ORIENTADOR, PROFESOR, DIRECTOR_CENTRO
  activo   Boolean @default(true)
  
  // Multi-tenancy
  centroId String
  centro   Centro @relation(fields: [centroId], references: [id], onDelete: Cascade)
  
  // Asignaturas (para profesores)
  asignaturas String? // JSON array: ["Matemáticas", "Lengua"]
  
  // Seguridad
  lastLogin DateTime?
  
  // Metadatos
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  peisCreados PEI[] @relation("PeiCreador")
  peisAprobados PEI[] @relation("PeiAprobador")
  activityLogs ActivityLog[]
  
  @@index([email])
  @@index([centroId])
  @@map("usuarios")
}

// Temario oficial cargado por profesores
model Temario {
  id          String @id @default(cuid())
  titulo      String
  descripcion String?
  asignatura  String
  curso       String // "1º ESO", "3º Primaria", etc.
  
  // Contenido
  contenido   String // Texto del temario
  archivos    String? // JSON array de archivos adjuntos
  
  // LOMLOE
  creditosLOMLOE String? // JSON con créditos oficiales
  competencias   String? // JSON con competencias clave
  
  // Multi-tenancy
  centroId String
  centro   Centro @relation(fields: [centroId], references: [id], onDelete: Cascade)
  
  // Metadatos
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  materialesAdaptados MaterialAdaptado[]
  
  @@index([centroId])
  @@map("temarios")
}

// ==============================================
// ESTUDIANTES Y PERFILES
// ==============================================

// Estudiante con necesidades educativas especiales
model Student {
  id        String   @id @default(cuid())
  nombre    String
  apellidos String
  fechaNacimiento DateTime
  curso     String   // "1º ESO", "3º Primaria", etc.
  
  // Perfil neurocognitivo
  diagnosticos String? // JSON array: ["TEA", "TDAH", "Dislexia"]
  estiloAprendizaje String? // VISUAL, AUDITIVO, KINESTESICO, MIXTO
  
  // Información de contacto
  nombreTutor    String?
  emailTutor     String?
  telefonoTutor  String?
  
  // Multi-tenancy
  centroId String
  centro   Centro @relation(fields: [centroId], references: [id], onDelete: Cascade)
  
  // Privacidad y consentimiento
  consentimientoRGPD Boolean @default(false)
  consentimientoIA   Boolean @default(false)
  
  // Metadatos
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  informes Report[]
  peis     PEI[]
  materialesAdaptados MaterialAdaptado[]
  pasaporteEducativo  PassportEntry[]
  
  @@index([centroId])
  @@index([emailTutor])
  @@map("students")
}

// ==============================================
// INFORMES Y PEI
// ==============================================

// Informe médico/psicopedagógico subido
model Report {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  path        String
  
  // Contenido extraído
  extractedText String?
  ocrText       String?
  
  // Estado de procesamiento
  status String @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  
  // Metadatos
  uploadedAt DateTime @default(now())
  processedAt DateTime?
  
  // Relaciones
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  peis      PEI[]
  
  @@index([studentId])
  @@map("reports")
}

// Plan Educativo Individualizado generado
model PEI {
  id      String @id @default(cuid())
  version Int    @default(1)
  
  // Contenido del PEI (como JSON strings)
  resumen     String // Resumen ejecutivo
  diagnostico String // Diagnóstico y NEE identificadas
  objetivos   String // JSON Array de objetivos SMART
  adaptaciones String // JSON Adaptaciones curriculares
  estrategias  String // JSON Estrategias metodológicas
  evaluacion   String // JSON Criterios de evaluación
  cronograma   String // JSON Planificación temporal
  
  // Estado y aprobación
  estado    String @default("BORRADOR") // BORRADOR, REVISION, APROBADO, ACTIVO, ARCHIVADO
  activo    Boolean @default(true)
  
  // Fechas importantes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  fechaRevision DateTime? // Fecha de próxima revisión
  fechaAprobacion DateTime? // Fecha de aprobación
  
  // Relaciones
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  reportId  String
  report    Report  @relation(fields: [reportId], references: [id], onDelete: Cascade)
  
  // Autoría y aprobación
  creadoPorId String
  creadoPor   Usuario @relation("PeiCreador", fields: [creadoPorId], references: [id])
  aprobadoPorId String?
  aprobadoPor   Usuario? @relation("PeiAprobador", fields: [aprobadoPorId], references: [id])
  
  // Integraciones
  materialesAdaptados MaterialAdaptado[]
  activityLogs        ActivityLog[]
  
  @@index([studentId])
  @@index([creadoPorId])
  @@map("peis")
}

// Material educativo adaptado por IA
model MaterialAdaptado {
  id          String @id @default(cuid())
  titulo      String
  descripcion String?
  tipo        String // VISUAL, AUDITIVO, KINESTESICO, MIXTO, TEXTO
  formato     String // PDF, VIDEO, AUDIO, INTERACTIVO
  
  // Contenido
  contenido   String // Texto o URL del recurso
  recursos    String? // JSON array de archivos multimedia
  
  // Adaptación
  nivelAdaptacion String // BAJO, MEDIO, ALTO
  
  // Metadatos
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  peiId String
  pei   PEI @relation(fields: [peiId], references: [id], onDelete: Cascade)
  temarioId String?
  temario   Temario? @relation(fields: [temarioId], references: [id])
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@index([peiId])
  @@index([studentId])
  @@map("materiales_adaptados")
}

// Pasaporte Educativo Inteligente (registro de logros)
model PassportEntry {
  id          String @id @default(cuid())
  tipo        String // LOGRO, COMPETENCIA, CERTIFICACION, HITO
  titulo      String
  descripcion String
  fecha       DateTime @default(now())
  
  // Datos de verificación
  verificado  Boolean @default(false)
  verificadoPor String?
  
  // Metadatos
  createdAt DateTime @default(now())
  
  // Relaciones
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@index([studentId])
  @@map("passport_entries")
}

// ==============================================
// AUDITORÍA Y SEGURIDAD
// ==============================================

// Log de actividades del sistema (auditoría RGPD)
model ActivityLog {
  id        String   @id @default(cuid())
  accion    String   // LOGIN, UPLOAD, GENERATE_PEI, VIEW_STUDENT, etc.
  entidad   String   // student, pei, report, usuario
  entidadId String
  detalles  String?  // JSON string con detalles adicionales
  
  // Seguridad
  userAgent String?
  ip        String?
  
  // Usuario que realizó la acción
  usuarioId String?
  usuario   Usuario? @relation(fields: [usuarioId], references: [id], onDelete: SetNull)
  
  // PEI relacionado (si aplica)
  peiId String?
  pei   PEI? @relation(fields: [peiId], references: [id], onDelete: SetNull)
  
  createdAt DateTime @default(now())
  
  @@index([usuarioId])
  @@index([entidad, entidadId])
  @@index([createdAt])
  @@map("activity_logs")
}

// ==============================================
// VALORES DE CONSTANTES (Reemplazo de Enums)
// ==============================================

// Roles: ADMIN, ORIENTADOR, PROFESOR, DIRECTOR_CENTRO
// Tipo Centro: PRIMARIA, ESO, BACHILLERATO, FP, UNIVERSIDAD
// Estilo Aprendizaje: VISUAL, AUDITIVO, KINESTESICO, MIXTO
// Estado Informe: PENDING, PROCESSING, COMPLETED, FAILED
// Estado PEI: BORRADOR, REVISION, APROBADO, ACTIVO, ARCHIVADO
// Tipo Material: VISUAL, AUDITIVO, KINESTESICO, MIXTO, TEXTO
// Formato Material: PDF, VIDEO, AUDIO, INTERACTIVO
// Nivel Adaptación: BAJO, MEDIO, ALTO
// Tipo Pasaporte: LOGRO, COMPETENCIA, CERTIFICACION, HITO